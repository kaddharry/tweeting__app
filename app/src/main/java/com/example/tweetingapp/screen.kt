package com.example.tweetingapp

import androidx.compose.foundation.clickable
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.FavoriteBorder
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.Query
import com.google.firebase.firestore.ktx.toObject
import java.util.Date
val TwitterBlue = Color(0xFF1DA1F2)
val TwitterDarkGray = Color(0xFF657786)

data class Tweet(
    val id: String = "", // Auto-generated by Fire store
    val username: String = "User", // Default username
    val message: String = "",
    val timestamp: Date = Date(),
    val likes: Int = 0
)
@Composable
fun TweetingApp() {
    val navController = rememberNavController()

    NavHost(navController = navController, startDestination = "home") {
        composable("home") { HomeScreen(navController) }
        composable("tweetDetail/{tweetId}") { backStackEntry ->
            val tweetId = backStackEntry.arguments?.getString("tweetId")
            tweetId?.let { TweetDetailScreen(it, navController) }
        }
    }
}
@Composable
fun HomeScreen(navController: NavController) {
    val db = FirebaseFirestore.getInstance()
    var tweetMessage by remember { mutableStateOf("") }
    var tweets by remember { mutableStateOf<List<Tweet>>(emptyList()) }
    var userName by remember { mutableStateOf("") }

    // Fetch tweets
    LaunchedEffect(Unit) {
        db.collection("tweets")
            .orderBy("timestamp", Query.Direction.DESCENDING)
            .addSnapshotListener { snapshot, _ ->
                tweets = snapshot?.documents?.mapNotNull { it.toObject<Tweet>()?.copy(id = it.id) } ?: emptyList()
            }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
            .background(color = Color.White)
    ) {
        Spacer(modifier = Modifier.height(40.dp))

        Text(
            text = "Tweeting App",
            fontSize = 38.sp,
            color = TwitterBlue,
            modifier = Modifier.padding(bottom = 16.dp).align(Alignment.CenterHorizontally)
        )

        OutlinedTextField(
            value = userName,
            onValueChange = { userName = it },
            label = { Text("Enter your name", color = TwitterDarkGray) },
            modifier = Modifier.fillMaxWidth(),
        )

        Spacer(modifier = Modifier.height(16.dp))

        OutlinedTextField(
            value = tweetMessage,
            onValueChange = { tweetMessage = it },
            label = { Text("What's happening? ;)", color = TwitterDarkGray) },
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(16.dp))

        Button(
            onClick = {
                if (tweetMessage.isNotBlank() && userName.isNotBlank()) {
                    val tweet = Tweet(username = userName, message = tweetMessage)
                    db.collection("tweets").add(tweet)
                }
            },
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(containerColor = TwitterBlue)
        ) {
            Text(text = "Tweet", fontSize = 20.sp)
        }

        Spacer(modifier = Modifier.height(16.dp))

        LazyColumn {
            items(tweets) { tweet ->
                TweetCard(
                    tweet = tweet,
                    onLike = { isLiked ->
                        val newLikes = if (isLiked) tweet.likes + 1 else tweet.likes - 1
                        db.collection("tweets").document(tweet.id)
                            .update("likes", newLikes)
                    },
                    onDelete = {
                        db.collection("tweets").document(tweet.id).delete()
                    },
                    onClick = {
                        navController.navigate("tweetDetail/${tweet.id}")
                    }
                )
                Spacer(modifier = Modifier.height(8.dp))
            }
        }
    }
}
@Composable
fun TweetCard(
    tweet: Tweet,
    onLike: (Boolean) -> Unit,
    onDelete: () -> Unit,
    onClick: () -> Unit // New parameter
) {
    var isLiked by remember { mutableStateOf(false) }

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onClick() } // Navigate when clicked
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(text = tweet.username, fontSize = 16.sp)
                Text(text = tweet.timestamp.toString(), fontSize = 12.sp)
            }

            Spacer(modifier = Modifier.height(8.dp))

            Text(text = tweet.message, fontSize = 16.sp)

            Spacer(modifier = Modifier.height(8.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                    IconButton(onClick = {
                        isLiked = !isLiked
                        onLike(isLiked)
                    }) {
                        Icon(
                            imageVector = if (isLiked) Icons.Default.Favorite else Icons.Default.FavoriteBorder,
                            contentDescription = "Like",
                            tint = if (isLiked) TwitterBlue else TwitterDarkGray
                        )
                    }
                    Text(text = "${tweet.likes} Likes", fontSize = 12.sp)
                }

                IconButton(onClick = onDelete) {
                    Icon(
                        imageVector = Icons.Default.Delete,
                        contentDescription = "Delete",
                        tint = TwitterDarkGray
                    )
                }
            }
        }
    }
}

@Composable
fun TweetDetailScreen(tweetId: String, navController: NavController) {
    val db = FirebaseFirestore.getInstance()
    var tweet by remember { mutableStateOf<Tweet?>(null) }
    var commentText by remember { mutableStateOf("") }
    var comments by remember { mutableStateOf<List<Pair<String, String>>>(emptyList()) } // Pair of comment text & timestamp

    LaunchedEffect(tweetId) {
        db.collection("tweets").document(tweetId).get().addOnSuccessListener { doc ->
            tweet = doc.toObject<Tweet>()
        }

        db.collection("tweets").document(tweetId)
            .collection("comments")
            .orderBy("timestamp", Query.Direction.DESCENDING) // Order comments by time
            .addSnapshotListener { snapshot, _ ->
                comments = snapshot?.documents?.mapNotNull {
                    val text = it.getString("text")
                    val timestamp = it.getDate("timestamp")?.toString() ?: "Unknown time"
                    text?.let { t -> Pair(t, timestamp) }
                } ?: emptyList()
            }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Spacer(modifier = Modifier.height(40.dp))
        Text(
            text = "COMMENT BOX",
            fontSize = 27.sp,
            color = TwitterBlue ,
            modifier = Modifier.align(Alignment.Start) // Move to top-left
        )
        Spacer(modifier = Modifier.height(8.dp))
        // Display TweetCard at the top (same style as home screen)
        tweet?.let {
            tweet?.let {
                ReadOnlyTweetCard(tweet = it)
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Comment Input Field
        OutlinedTextField(
            value = commentText,
            onValueChange = { commentText = it },
            label = { Text("Add a comment") },
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(8.dp))

        // Comment Button
        Button(
            onClick = {
                if (commentText.isNotBlank()) {
                    val commentData = mapOf(
                        "text" to commentText,
                        "timestamp" to com.google.firebase.Timestamp.now()
                    )

                    db.collection("tweets").document(tweetId)
                        .collection("comments").add(commentData)
                    commentText = "" // Clear input field
                }
            }
        ) {
            Text("Comment")
        }

        // Scrollable comments section
        LazyColumn(
            modifier = Modifier.weight(1f) // Ensures comments scroll but tweet stays fixed
        ) {
            items(comments) { (comment, time) ->
                CommentBox(comment, time)
                Spacer(modifier = Modifier.height(8.dp))
            }
        }
    }
}

@Composable
fun ReadOnlyTweetCard(tweet: Tweet) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = TwitterBlue)

    ) {
        Column(
            modifier = Modifier.padding(22.dp)
        ) {
            // Username and formatted timestamp
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(
                    text = tweet.username,
                    fontSize = 22.sp,
                    color = Color.White
                )
                Text(
                    text = tweet.timestamp.toString(), // Format timestamp
                    fontSize = 12.sp,
                    color = Color.White
                )
            }

            Spacer(modifier = Modifier.height(8.dp))

            // Tweet message
            Text(
                text = tweet.message,
                fontSize = 20.sp,
                color = Color.White
            )

            Spacer(modifier = Modifier.height(8.dp))

            // Like count (Only Display, No Like Button)
            Text(
                text = "${tweet.likes} Likes",
                fontSize = 12.sp,
                color = Color.White
            )
        }
    }
}

@Composable
fun CommentBox(commentText: String, timestamp: String) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color.LightGray, shape = RoundedCornerShape(12.dp))
            .padding(12.dp)
    ) {
        Column {
            Text(text = commentText, fontSize = 18.sp, color = Color.Black)
            Spacer(modifier = Modifier.height(4.dp))
            Text(
                text = timestamp,
                fontSize = 12.sp,
                color = Color.DarkGray,
                modifier = Modifier.align(Alignment.End)
            )
        }
    }
}

/*
  Hardik
  A new App

  hii, Congratulations
  working flawlessly

*/